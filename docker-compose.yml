version: "3.7"

services:

  traefik:
    command:
      # Exposes Traefik dashboard
      # (comment this to avoid useless security risks)
      - "--api.dashboard=true"

      # Docker Integration
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.docker.network=web"

      # Entry Points
      - "--entrypoints.http80.address=:80"
    volumes:
      - ${CODE_SERVER_CWD}/data/.htpasswd:/basic-auth/.htpasswd
      - /var/run/docker.sock:/var/run/docker.sock:ro
    image: traefik:v2.2
    network_mode: host
    restart: on-failure
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.csi.loadbalancer.server.port=1337"
      - "traefik.http.routers.dbox-traefik--80.rule=Host(`127.0.0.11`)"
      
      - "traefik.http.routers.dbox-traefik--80.entrypoints=http80"
      - "traefik.http.routers.dbox-traefik--80.service=api@internal"
      - "traefik.http.routers.dbox-traefik--80.middlewares=dbox-github-auth,dbox-traefik-stripprefix"
      - "traefik.http.routers.dbox-traefik--80.rule=Host(`${CODE_SERVER_DNS}`) && (PathPrefix(`/traefik`) || PathPrefix(`/api`))"
  
      - "traefik.http.middlewares.dbox-traefik-stripprefix.stripprefix.prefixes=/traefik"
      - "traefik.http.middlewares.dbox-basic-auth.basicauth.usersfile=/basic-auth/.htpasswd"
      - "traefik.http.middlewares.dbox-github-auth.forwardauth.address=https://api-alpha.dbox.zone/api/v1/auth/self"

  dbox-api:
    image: node:12.2
    volumes:
      - ./api/package.json:/usr/src/app/package.json:delegated
      - ./api/package-lock.json:/usr/src/app/package-lock.json:delegated
      - ./api/index.js:/usr/src/app/index.js:delegated
    working_dir: /usr/src/app
    expose:
      - 8080
    entrypoint: ["npm", "run", "compose:start:prod"]
    # healthcheck:
    #   test: ["CMD", "wget", "-qO", "-", "http://auth-server:4000/healthz"]
    #   interval: 10s
    #   timeout: 5s
    #   retries: 20
    labels:
      - "traefik.enable=true"

      # Configure basic HTTP mapping:
      - "traefik.http.routers.dbox-api--80.entrypoints=http80"
      - "traefik.http.routers.dbox-api--80.middlewares=dbox-github-auth,dbox-api--prefix"
      - "traefik.http.routers.dbox-api--80.rule=Host(`${CODE_SERVER_DNS}`) && PathPrefix(`/dbox`)"

      # Configure middlewares:
      - "traefik.http.middlewares.dbox-api--prefix.stripprefix.prefixes=/dbox"

  code-server:
    image: marcopeg/nginx-proxy:0.0.2
    environment:
     - NGINX_PORT=40002
     - NGINX_UPSTREAM_PORT=40001
    network_mode: host
    restart: on-failure
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.dbox-code-server.loadbalancer.server.port=40002"

      # Configure basic HTTP mapping
      - "traefik.http.routers.dbox-code-server--80.entrypoints=http80"
      - "traefik.http.routers.dbox-code-server--80.middlewares=dbox-github-auth"
      - "traefik.http.routers.dbox-code-server--80.rule=Host(`${CODE_SERVER_DNS}`)"

  filebrowser:
    image: filebrowser/filebrowser:v2.10.0
    volumes:
      - /home/ubuntu:/srv
    command:
      - "--baseurl=/filebrowser"
      - "--noauth"
    labels:
      - "traefik.enable=true"

      # Configure basic HTTP mapping
      - "traefik.http.routers.dbox-filebrowser--80.entrypoints=http80"
      - "traefik.http.routers.dbox-filebrowser--80.middlewares=dbox-github-auth"
      - "traefik.http.routers.dbox-filebrowser--80.rule=Host(`${CODE_SERVER_DNS}`) && PathPrefix(`/filebrowser`)"

  netdata:
    labels:
      - "traefik.enable=true"

      # Configure basic HTTP mapping
      - "traefik.http.routers.dbox-netdata--80.entrypoints=http80"
      - "traefik.http.routers.dbox-netdata--80.middlewares=dbox-github-auth,dbox-netdata--stripprefix"
      - "traefik.http.routers.dbox-netdata--80.rule=Host(`${CODE_SERVER_DNS}`) && PathPrefix(`/netdata`)"

      # Configure Middlewares
      - "traefik.http.middlewares.dbox-netdata--stripprefix.stripprefix.prefixes=/netdata"
    image: netdata/netdata:v1.26.0
    hostname: ${CODE_SERVER_DNS}
    cap_add:
      - SYS_PTRACE
    security_opt:
      - apparmor:unconfined
    volumes:
      # @TODO: map to local data folder
      # - netdataconfig:/etc/netdata
      # - netdatalib:/var/lib/netdata
      # - netdatacache:/var/cache/netdata
      - /etc/passwd:/host/etc/passwd:ro
      - /etc/group:/host/etc/group:ro
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /etc/os-release:/host/etc/os-release:ro
      # - /var/run/docker.sock:/var/run/docker.sock:ro
    restart: on-failure
